<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="205" passed="205">
  <reporter-output>
  </reporter-output>
  <suite name="Automation Driver Test Suite" duration-ms="10891" started-at="2017-07-06T16:45:24Z" finished-at="2017-07-06T16:45:35Z">
    <groups>
    </groups>
    <test name="Driver Test" duration-ms="10891" started-at="2017-07-06T16:45:24Z" finished-at="2017-07-06T16:45:35Z">
      <class name="raysullivan.unitTest.TestAdKeywords">
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="7" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ a val]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ A VALUE]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[This is a value that I like]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[I want a horsey]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertContains" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertContains" data-provider="AssertContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[I want a horsey]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertContains -->
        <test-method status="PASS" signature="TestAssertEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertEquals" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertEquals" data-provider="AssertEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertEquals -->
        <test-method status="PASS" signature="TestAssertEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertEquals" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertEquals" data-provider="AssertEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[THIS IS AN EQUAL VALUE]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertEquals -->
        <test-method status="PASS" signature="TestAssertEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertEquals" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertEquals" data-provider="AssertEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[this is not an equal value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertEquals -->
        <test-method status="PASS" signature="TestAssertEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertEquals" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertEquals" data-provider="AssertEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertEquals -->
        <test-method status="PASS" signature="TestAssertNotContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotContains" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestAssertNotContains" data-provider="AssertNotContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ a value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotContains -->
        <test-method status="PASS" signature="TestAssertNotContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotContains" data-provider="AssertNotContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[THIS IS A VALUE]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotContains -->
        <test-method status="PASS" signature="TestAssertNotContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotContains" data-provider="AssertNotContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotContains -->
        <test-method status="PASS" signature="TestAssertNotContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotContains" data-provider="AssertNotContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[I want a horsey]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotContains -->
        <test-method status="PASS" signature="TestAssertNotContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotContains" data-provider="AssertNotContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[I want a horsey]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotContains -->
        <test-method status="PASS" signature="TestAssertNotContains(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotContains" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotContains" data-provider="AssertNotContains" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[This is a value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[This is a value that I like]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotContains -->
        <test-method status="PASS" signature="TestAssertNotEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotEquals" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotEquals" data-provider="AssertNotEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotEquals -->
        <test-method status="PASS" signature="TestAssertNotEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotEquals" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotEquals" data-provider="AssertNotEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[THIS IS AN EQUAL VALUE]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotEquals -->
        <test-method status="PASS" signature="TestAssertNotEquals(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestAssertNotEquals" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestAssertNotEquals" data-provider="AssertNotEquals" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${vname1}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[this is an equal value]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${vname2}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[this is not an equal value]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestAssertNotEquals -->
        <test-method status="PASS" signature="TestCreateVariable(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestCreateVariable" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestCreateVariable" data-provider="CreateVariable" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[CREATEVARIABLE invalid: variable not declared.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCreateVariable -->
        <test-method status="PASS" signature="TestCreateVariable(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestCreateVariable" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="TestCreateVariable" data-provider="CreateVariable" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCreateVariable -->
        <test-method status="PASS" signature="TestCreateVariable(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestCreateVariable" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="TestCreateVariable" data-provider="CreateVariable" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${variable2}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[CREATEVARIABLE invalid: Value cannot be a variable.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCreateVariable -->
        <test-method status="PASS" signature="TestPause()[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestPause" duration-ms="1001" started-at="2017-07-06T10:45:30Z" description="TestPause" finished-at="2017-07-06T10:45:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestPause -->
        <test-method status="PASS" signature="TestPauseException(java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestPauseException" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="TestPauseException" data-provider="PauseException" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  PAUSE duration must be a positive integer value]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  PAUSE duration must be a positive integer value
	at raysullivan.operation.AdKeywords.pause(AdKeywords.java:152)
	at raysullivan.unitTest.TestAdKeywords.TestPauseException(TestAdKeywords.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestPauseException -->
        <test-method status="PASS" signature="TestPauseException(java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestPauseException" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestPauseException" data-provider="PauseException" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  PAUSE duration must be a positive integer value]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  PAUSE duration must be a positive integer value
	at raysullivan.operation.AdKeywords.pause(AdKeywords.java:152)
	at raysullivan.unitTest.TestAdKeywords.TestPauseException(TestAdKeywords.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestPauseException -->
        <test-method status="PASS" signature="TestPauseException(java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestPauseException" duration-ms="2" started-at="2017-07-06T10:45:31Z" description="TestPauseException" data-provider="PauseException" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  PAUSE duration must be a positive integer value]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  PAUSE duration must be a positive integer value
	at raysullivan.operation.AdKeywords.pause(AdKeywords.java:157)
	at raysullivan.unitTest.TestAdKeywords.TestPauseException(TestAdKeywords.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestPauseException -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="4" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="15" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="2" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${variable2}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TEXT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DECIMAL]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[PAUSE]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[PAUSE]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[CLICKANDHOLD]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[CLICKANDHOLD]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.00]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[SELECTBYINDEX]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[SELECTBYINDEX]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.00]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${variable}]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[DESELECTBYINDEX]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.00]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[DESELECTBYINDEX]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
        <test-method status="PASS" signature="TestVariableHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdKeywords@2d127a61]" name="TestVariableHandler" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="TestVariableHandler" data-provider="VariableHandler" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UbvSbIXxhSqpFp895+teXA==]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[ENCRYPT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[OPERATION]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Trummino65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestVariableHandler -->
      </class> <!-- raysullivan.unitTest.TestAdKeywords -->
      <class name="raysullivan.unitTest.TestAdVariable">
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="12" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${ValidVariableName}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Valid.Variable}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${a}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Truncated_Long_Vari}able]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Valid_Really_Long_Variable}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{NotaVariable}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Not a Variable]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{NotaVariable]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[NotaVariable}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[nv]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[n]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[nva]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="isAVariableTest(java.lang.String, boolean)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="isAVariableTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateisAVariable" data-provider="isAVariable" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isAVariableTest -->
        <test-method status="PASS" signature="setVariableAndOverwrite(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="setVariableAndOverwrite" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="setVariableAndOverwrite" data-provider="setVariableOverwrite" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Heidi Mc Natt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Heidi McNatt]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setVariableAndOverwrite -->
        <test-method status="PASS" signature="setVariableAndOverwrite(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="setVariableAndOverwrite" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="setVariableAndOverwrite" data-provider="setVariableOverwrite" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Heidi Mc Natt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Curious George]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setVariableAndOverwrite -->
        <test-method status="PASS" signature="setVariableAndOverwrite(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="setVariableAndOverwrite" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="setVariableAndOverwrite" data-provider="setVariableOverwrite" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Heidi Mc Natt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setVariableAndOverwrite -->
        <test-method status="PASS" signature="setVariableMultiple(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="setVariableMultiple" duration-ms="8" started-at="2017-07-06T10:45:32Z" description="setVariableMultiple" data-provider="setVariableMultiple" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Heidi Mc Natt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${animal.name}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Curious George]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setVariableMultiple -->
        <test-method status="PASS" signature="validateAssertVariables(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateAssertVariables" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateAssertVariables" data-provider="assertVariables" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Cannot compare a variable to itself.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Cannot compare a variable to itself.
	at raysullivan.operation.AdVariable.checkAssertVariables(AdVariable.java:94)
	at raysullivan.unitTest.TestAdVariable.validateAssertVariables(TestAdVariable.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateAssertVariables -->
        <test-method status="PASS" signature="setVariableMultiple(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="setVariableMultiple" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="setVariableMultiple" data-provider="setVariableMultiple" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${user.name}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Heidi Mc Natt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${full.name}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Hildred F. Mc Natt III]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setVariableMultiple -->
        <test-method status="PASS" signature="validateVariable(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariable" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariable" data-provider="validVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${ValidVariableName}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${ValidVariableName}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariable -->
        <test-method status="PASS" signature="validateVariable(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariable" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariable" data-provider="validVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Valid.Variable}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${Valid.Variable}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariable -->
        <test-method status="PASS" signature="validateVariable(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariable" duration-ms="4" started-at="2017-07-06T10:45:32Z" description="validateVariable" data-provider="validVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Valid_Really_Long_Variable}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${Valid_Really_Long_Variable}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariable -->
        <test-method status="PASS" signature="validateVariable(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariable" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariable" data-provider="validVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${a}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${a}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariable -->
        <test-method status="PASS" signature="validateVariable(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariable" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariable" data-provider="validVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Truncated_Long_Vari}able]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${Truncated_Long_Vari}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariable -->
        <test-method status="PASS" signature="validateVariableInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariableInvalid" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariableInvalid" data-provider="invalidVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${Invalid VariableName}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${Invalid VariableName}]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Variable 'Invalid VariableName' cannot contain whitespace]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Variable 'Invalid VariableName' cannot contain whitespace
	at raysullivan.operation.AdVariable.checkWhitespace(AdVariable.java:87)
	at raysullivan.operation.AdVariable.validateVariableName(AdVariable.java:51)
	at raysullivan.unitTest.TestAdVariable.validateVariableInvalid(TestAdVariable.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariableInvalid -->
        <test-method status="PASS" signature="validateVariableInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariableInvalid" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariableInvalid" data-provider="invalidVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${}]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error: Variable name cannot be empty '${}']]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error: Variable name cannot be empty '${}'
	at raysullivan.operation.AdVariable.checkEmptyVariable(AdVariable.java:62)
	at raysullivan.operation.AdVariable.validateVariableName(AdVariable.java:44)
	at raysullivan.unitTest.TestAdVariable.validateVariableInvalid(TestAdVariable.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariableInvalid -->
        <test-method status="PASS" signature="validateVariableInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdVariable@46238e3f]" name="validateVariableInvalid" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateVariableInvalid" data-provider="invalidVariableNames" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[${InalidVariableName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${InalidVariableName]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Variable '${InalidVariableName' does not have a valid ending delimiter }]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Variable '${InalidVariableName' does not have a valid ending delimiter }
	at raysullivan.operation.AdVariable.validateVariableName(AdVariable.java:55)
	at raysullivan.unitTest.TestAdVariable.validateVariableInvalid(TestAdVariable.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVariableInvalid -->
      </class> <!-- raysullivan.unitTest.TestAdVariable -->
      <class name="raysullivan.unitTest.TestAdOpenExcelSpreadsheet">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="beforeTest" is-config="true" duration-ms="8" started-at="2017-07-06T10:45:24Z" finished-at="2017-07-06T10:45:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:raysullivan.unitTest.TestAdTakeScreenShot@69a10787]" name="beforeTest" is-config="true" duration-ms="5618" started-at="2017-07-06T10:45:24Z" finished-at="2017-07-06T10:45:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase.xlsx]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[RenameWorksheet]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet DefaultTestCase.xlsx at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\ with worksheet RenameWorksheet not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet DefaultTestCase.xlsx at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\ with worksheet RenameWorksheet not found.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:20)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase.xlsx]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[RenameWorksheet]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet DefaultTestCase.xlsx at location null with worksheet RenameWorksheet not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet DefaultTestCase.xlsx at location null with worksheet RenameWorksheet not found.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:20)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[RenameWorksheet]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet null at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\ with worksheet RenameWorksheet not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet null at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\ with worksheet RenameWorksheet not found.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:20)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase.xlsx]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet DefaultTestCase.xlsx at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\ with worksheet null not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet DefaultTestCase.xlsx at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\ with worksheet null not found.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:20)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="0" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet null at location null with worksheet null not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet null at location null with worksheet null not found.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:20)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="1" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[RenameWorksheet]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet DefaultTestCase at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases with worksheet RenameWorksheet not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet DefaultTestCase at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases with worksheet RenameWorksheet not found.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:20)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="invalidKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="invalidKBTestFile" duration-ms="687" started-at="2017-07-06T10:45:31Z" description="invalidKBTestFile" data-provider="invalidFiles" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase.xlsx]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[enameWorksheet]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Test Spreadsheet DefaultTestCase.xlsx at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases does not contain worksheet enameWorksheet.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Test Spreadsheet DefaultTestCase.xlsx at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases does not contain worksheet enameWorksheet.
	at raysullivan.operation.AdOpenKDTestSpreadsheet.readKDSheet(AdOpenKDTestSpreadsheet.java:33)
	at raysullivan.unitTest.TestAdOpenExcelSpreadsheet.invalidKBTestFile(TestAdOpenExcelSpreadsheet.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidKBTestFile -->
        <test-method status="PASS" signature="validKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="validKBTestFile" duration-ms="46" started-at="2017-07-06T10:45:32Z" description="validKBTestFile" data-provider="validFiles" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase.xlsx]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[RenameWorksheet]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validKBTestFile -->
        <test-method status="PASS" signature="validKBTestFile(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdOpenExcelSpreadsheet@d6da883]" name="validKBTestFile" duration-ms="149" started-at="2017-07-06T10:45:32Z" description="validKBTestFile" data-provider="validFiles" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Cases]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DefaultTestCase.xls]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[RenameWorksheet]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validKBTestFile -->
      </class> <!-- raysullivan.unitTest.TestAdOpenExcelSpreadsheet -->
      <class name="raysullivan.unitTest.TestAdUtil">
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="4" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.64525339E13]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.41832185E12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[11.6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.13465754E12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.41832185E12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8.5100026E14]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.41832185E12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[600.005]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1.41832192E10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.41832185E12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-0.01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-8.5100026E14]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1.41832185E12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[600.005]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.41832192E10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1.41832185E12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-0.01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[500.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getBrowser()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getBrowser" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getBrowser" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBrowser -->
        <test-method status="PASS" signature="getAverage(float, float, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getAverage" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getAverage" data-provider="avgValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[500.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[500.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAverage -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1418321923194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1418321913196]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9.998]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1418321913196]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1418321923194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9.998]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1418321923194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.41832205E9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1418321923194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.41832205E9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-23194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-13194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-13194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-23194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[23194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-13194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[36.388]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[23194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[13194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[13194]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[23194]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getElapsedTime(long, long, float)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getElapsedTime" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getElapsedTime" data-provider="etValues" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElapsedTime -->
        <test-method status="PASS" signature="getError()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getError" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getError" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getError -->
        <test-method status="PASS" signature="getIsCapVideo()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getIsCapVideo" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getIsCapVideo" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIsCapVideo -->
        <test-method status="PASS" signature="getIsCapCsv()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getIsCapCsv" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getIsCapCsv" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIsCapCsv -->
        <test-method status="PASS" signature="getKeyString()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getKeyString" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getKeyString" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getKeyString -->
        <test-method status="PASS" signature="getPropertyName()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getPropertyName" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getPropertyName" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyName -->
        <test-method status="PASS" signature="getResultSpreadsheet()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getResultSpreadsheet" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getResultSpreadsheet" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResultSpreadsheet -->
        <test-method status="PASS" signature="getSheetIterations()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getSheetIterations" duration-ms="2" started-at="2017-07-06T10:45:32Z" description="getSheetIterations" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSheetIterations -->
        <test-method status="PASS" signature="getSpreadsheet()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getSpreadsheet" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getSpreadsheet" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSpreadsheet -->
        <test-method status="PASS" signature="getSuccess()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getSuccess" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getSuccess" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSuccess -->
        <test-method status="PASS" signature="getTestProfile()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getTestProfile" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getTestProfile" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestProfile -->
        <test-method status="PASS" signature="getTestPropertyPath()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getTestPropertyPath" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getTestPropertyPath" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestPropertyPath -->
        <test-method status="PASS" signature="getTestTimeout()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getTestTimeout" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getTimeout" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestTimeout -->
        <test-method status="PASS" signature="getTestReportPath()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getTestReportPath" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getTestReportPath" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestReportPath -->
        <test-method status="PASS" signature="getTestcase()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getTestcase" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getTestcase" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestcase -->
        <test-method status="PASS" signature="getWorksheet()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getWorksheet" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="getWorksheet" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getWorksheet -->
        <test-method status="PASS" signature="getWebProfile()[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="getWebProfile" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="getWebProfile" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getWebProfile -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[text]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.00]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[text]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[pause]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PAUSE]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.00]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TEXT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345678.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TEXT]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PAUSE]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[GETTEXT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[decimal]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[100.00]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[200.01]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DeCiMaL]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[200.01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[SETTEXT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[300.99]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DECIMAL]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[300.99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="2" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DECIMAL]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[400.00]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4,140.00 USD]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[4,140.00 USD]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[settext]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[encrypt]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="1" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
        <test-method status="PASS" signature="validateValTypeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdUtil@32cf48b7]" name="validateValTypeTest" duration-ms="0" started-at="2017-07-06T10:45:32Z" description="validateValTypeTest" data-provider="valueCellFormat" finished-at="2017-07-06T10:45:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.99999]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[123.99999]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateValTypeTest -->
      </class> <!-- raysullivan.unitTest.TestAdUtil -->
      <class name="raysullivan.unitTest.TestAdGetPropertyAttribute">
        <test-method status="PASS" signature="getPropertyInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyInvalid" duration-ms="12" started-at="2017-07-06T10:45:30Z" description="getPropertyInvalid" data-provider="invalidPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.Properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[failedNoBy]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error: object 'failedNoBy' not found in property file 'Test.Properties'.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error: object 'failedNoBy' not found in property file 'Test.Properties'.
	at raysullivan.operation.AdGetPropertyAttribute.getObject(AdGetPropertyAttribute.java:20)
	at raysullivan.unitTest.TestAdGetPropertyAttribute.getPropertyInvalid(TestAdGetPropertyAttribute.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyInvalid -->
        <test-method status="PASS" signature="getPropertyInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyInvalid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyInvalid" data-provider="invalidPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[failedIncorrectType]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error : 'dork' not a valid object type for object name 'incorrectType'.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error : 'dork' not a valid object type for object name 'incorrectType'.
	at raysullivan.operation.AdGetPropertyAttribute.getObject(AdGetPropertyAttribute.java:41)
	at raysullivan.unitTest.TestAdGetPropertyAttribute.getPropertyInvalid(TestAdGetPropertyAttribute.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyInvalid -->
        <test-method status="PASS" signature="getPropertyInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyInvalid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyInvalid" data-provider="invalidPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.Properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[missing]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error: object 'missing' not found in property file 'Test.Properties'.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error: object 'missing' not found in property file 'Test.Properties'.
	at raysullivan.operation.AdGetPropertyAttribute.getObject(AdGetPropertyAttribute.java:20)
	at raysullivan.unitTest.TestAdGetPropertyAttribute.getPropertyInvalid(TestAdGetPropertyAttribute.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyInvalid -->
        <test-method status="PASS" signature="getPropertyInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyInvalid" duration-ms="12" started-at="2017-07-06T10:45:30Z" description="getPropertyInvalid" data-provider="invalidPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.Properties]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error: object 'null' not found in property file 'Test.Properties'.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error: object 'null' not found in property file 'Test.Properties'.
	at raysullivan.operation.AdGetPropertyAttribute.getObject(AdGetPropertyAttribute.java:20)
	at raysullivan.unitTest.TestAdGetPropertyAttribute.getPropertyInvalid(TestAdGetPropertyAttribute.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyInvalid -->
        <test-method status="PASS" signature="getPropertyInvalid(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyInvalid" duration-ms="2" started-at="2017-07-06T10:45:30Z" description="getPropertyInvalid" data-provider="invalidPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.Properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error: object '' not found in property file 'Test.Properties'.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error: object '' not found in property file 'Test.Properties'.
	at raysullivan.operation.AdGetPropertyAttribute.getObject(AdGetPropertyAttribute.java:20)
	at raysullivan.unitTest.TestAdGetPropertyAttribute.getPropertyInvalid(TestAdGetPropertyAttribute.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyInvalid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="5" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.Properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[mainLogo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.cssSelector: img[alt="Red Robin Logo"]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="2" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[changeLocation]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.linkText: Change Location]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="2" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[menuLanding]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.id: pageTitle]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[locSearchBox]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.className: changeLocationInput]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[locFindButton]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.tagName: findBtn]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[locationMoreInfo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.name: toggleMoreLocationInfo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[locationDistance]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.partialLinkText: div.distance]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
        <test-method status="PASS" signature="getPropertyValid(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdGetPropertyAttribute@2bbaf4f0]" name="getPropertyValid" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="getPropertyValid" data-provider="validPropertyName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[upperIconInstagram]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[By.xpath: //div[3]/div[1]/div[2]/div[2]/ul/li[1]/a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPropertyValid -->
      </class> <!-- raysullivan.unitTest.TestAdGetPropertyAttribute -->
      <class name="raysullivan.unitTest.TestAdTakeScreenShot">
        <test-method status="PASS" signature="testScreenShot()[pri:0, instance:raysullivan.unitTest.TestAdTakeScreenShot@69a10787]" name="testScreenShot" duration-ms="41" started-at="2017-07-06T10:45:32Z" description="testScreenShot" finished-at="2017-07-06T10:45:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testScreenShot -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:raysullivan.unitTest.TestAdTakeScreenShot@69a10787]" name="afterTest" is-config="true" duration-ms="2510" started-at="2017-07-06T10:45:32Z" finished-at="2017-07-06T10:45:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- raysullivan.unitTest.TestAdTakeScreenShot -->
      <class name="raysullivan.unitTest.TestAdBrowserProperties">
        <test-method status="PASS" signature="testFileNotFound(java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdBrowserProperties@11c20519]" name="testFileNotFound" duration-ms="4" started-at="2017-07-06T10:45:30Z" description="testFileNotFound" data-provider="propertyFileNotFound" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[est.properties]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  Cannot find test property file est.properties at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Properties\]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  Cannot find test property file est.properties at location C:\Users\rsullivan\Eclipse\workspace\AutomationDriverV2\resource\Test Properties\
	at raysullivan.operation.AdReadProperties.getObjectRepository(AdReadProperties.java:21)
	at raysullivan.unitTest.TestAdBrowserProperties.testFileNotFound(TestAdBrowserProperties.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFileNotFound -->
        <test-method status="PASS" signature="testPropertyFile(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdBrowserProperties@11c20519]" name="testPropertyFile" duration-ms="11" started-at="2017-07-06T10:45:30Z" description="testPropertyFile" data-provider="getPropertyFileName" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[TestReadObject.properties]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{mainLogo=img[alt=Red Robin Logo]|css, changeLocation=Change Location|link}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPropertyFile -->
      </class> <!-- raysullivan.unitTest.TestAdBrowserProperties -->
      <class name="raysullivan.unitTest.TestAdEncryptDecrypt">
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="177" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UTrj43lAOWmZjXaqGaKnBg==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[tNs3FeJl0BYnShvQl0fqvA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[YtPA1/s+SdGJSKNeq5EjSA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DoTheTwist]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3t0JHljez4OIHnou97KwVw==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UbvSbIXxhSqpFp895+teXA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Trummino65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[A0TEWyN1ibkJ/1uMJ9BkqKrJfTPpnaEsgnz7sygQyl2IOHdXkeBk9Cz47ciwkekp5x8WYr+7cvDiphPAB7Sm3s5Q7fgt/5Sj3Xsp+PbE/MT43uiL2aWE6msoHnJk4JwWnSt5wYrtwtOEw07vBSDMlg==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Incredibly Long Text String with blanks and other stuff like special characters !@#$%^&*()+_|{}[]:<>,./?]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptString" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="decryptString" data-provider="decryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptString -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="2" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UTrj43lAOWmZjXaqGaKnBg==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[tNs3FeJl0BYnShvQl0fqvA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[YtPA1/s+SdGJSKNeq5EjSA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DontDoTheTwist]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3t0JHljez4OIHnou97KwVw==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Merry Christmas]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3t0JHljez4OIHnou97KwVw==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[A0TEWyN1ibkJ/1uMJ9BkqKrJfTPpnaEsgnz7sygQyl2IOHdXkeBk9Cz47ciwkekp5x8WYr+7cvDiphPAB7Sm3s5Q7fgt/5Sj3Xsp+PbE/MT43uiL2aWE6msoHnJk4JwWnSt5wYrtwtOEw07vBSDMlg==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Incrediblyy Long Text String with blanks and other stuff like special characters !@#$%^&*()+_|{}[]:<>,./?]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringInvalid" data-provider="decryptValuesInvalid" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringBad -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  String to decrypt is not a valid AES cipher.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  String to decrypt is not a valid AES cipher.
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:70)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.generateKey(AdEncryptDecrypt.java:17)
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:52)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[NullPointerException:  Decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: NullPointerException:  Decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:56)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="8" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 15 is invalid.  Keystring: MerryChristmas!]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 15 is invalid.  Keystring: MerryChristmas!
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#Today]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf62mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#Today]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#Today]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf62mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.generateKey(AdEncryptDecrypt.java:17)
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:52)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[NullPointerException:  Decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: NullPointerException:  Decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:56)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w=]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#Today]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 21 is invalid.  Keystring: MerryChristmas!#Today
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="decryptStringExceptions(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="decryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="decryptStringExceptions" data-provider="decryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  String to decrypt is not a valid AES cipher.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  String to decrypt is not a valid AES cipher.
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:70)
	at raysullivan.unitTest.TestAdEncryptDecrypt.decryptStringExceptions(TestAdEncryptDecrypt.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- decryptStringExceptions -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[ieKkIwygTyBf63mi62KD7w==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Trummino65]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UbvSbIXxhSqpFp895+teXA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[UTrj43lAOWmZjXaqGaKnBg==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[tNs3FeJl0BYnShvQl0fqvA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DoTheTwist]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[YtPA1/s+SdGJSKNeq5EjSA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Incredibly Long Text String with blanks and other stuff like special characters !@#$%^&*()+_|{}[]:<>,./?]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[A0TEWyN1ibkJ/1uMJ9BkqKrJfTPpnaEsgnz7sygQyl2IOHdXkeBk9Cz47ciwkekp5x8WYr+7cvDiphPAB7Sm3s5Q7fgt/5Sj3Xsp+PbE/MT43uiL2aWE6msoHnJk4JwWnSt5wYrtwtOEw07vBSDMlg==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptString(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptString" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValues" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3t0JHljez4OIHnou97KwVw==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptString -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[horsehockeynamaz]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Trummino65]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MerryChristmas!#]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DoTheTwist]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpKUYU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Incredibly Long Text String with blanks and other stuff like special characters !@#$%^&*()+_|{}[]:<>,./?]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[automationDriver]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringBad(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringBad" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptString" data-provider="encryptValuesBad" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4QUUgpWUehdpYUKU2U8xZA==]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringBad -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNational]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[Error:  String to decrypt is not a valid AES cipher.]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: Error:  String to decrypt is not a valid AES cipher.
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:70)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[NullPointerException:  Decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: NullPointerException:  Decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:56)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="2" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.generateKey(AdEncryptDecrypt.java:17)
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:52)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Happy Birthday]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 14 is invalid.  Keystring: Happy Birthday]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 14 is invalid.  Keystring: Happy Birthday
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="0" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[NullPointerException:  Decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: NullPointerException:  Decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:56)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="12" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: IllegalArgumentException:  Encrypt/decrypt keystring cannot be null or blank
	at raysullivan.operation.AdEncryptDecrypt.generateKey(AdEncryptDecrypt.java:17)
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:52)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[CricketNational]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 15 is invalid.  Keystring: CricketNational]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 15 is invalid.  Keystring: CricketNational
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
        <test-method status="PASS" signature="encryptStringExceptions(java.lang.String, java.lang.String)[pri:0, instance:raysullivan.unitTest.TestAdEncryptDecrypt@6cc7b4de]" name="encryptStringExceptions" duration-ms="1" started-at="2017-07-06T10:45:30Z" description="encryptStringExceptions" data-provider="encryptValuesExceptions" finished-at="2017-07-06T10:45:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Welcome2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BaseballNationalLeague]]>
              </value>
            </param>
          </params>
          <exception class="raysullivan.operation.AdException">
            <message>
              <![CDATA[InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 22 is invalid.  Keystring: BaseballNationalLeague]]>
            </message>
            <full-stacktrace>
              <![CDATA[raysullivan.operation.AdException: InvalidKeyException:  Decrypt keystring must be 16 characters; keystring length of 22 is invalid.  Keystring: BaseballNationalLeague
	at raysullivan.operation.AdEncryptDecrypt.decrypt(AdEncryptDecrypt.java:58)
	at raysullivan.unitTest.TestAdEncryptDecrypt.encryptStringExceptions(TestAdEncryptDecrypt.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- raysullivan.operation.AdException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- encryptStringExceptions -->
      </class> <!-- raysullivan.unitTest.TestAdEncryptDecrypt -->
    </test> <!-- Driver Test -->
  </suite> <!-- Automation Driver Test Suite -->
</testng-results>
